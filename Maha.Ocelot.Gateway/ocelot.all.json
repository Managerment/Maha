{
  "ReRoutes": [ //处理上游请求的对象（下游指服务提供者，即服务程序。上游服务消费者，即用户或服务调用）
    {
      "DownstreamPathTemplate": "/api/posts/{postId}", //下游路由请求的模板
      "DownstreamScheme": "http", //下游路由请求的方式
      "DownstreamHostAndPorts": [ //下游路由的Host以及端口。用于定义将请求转发到的任何下游服务的主机和端口。通常这只包含一个条目，但有时希望对下游请求服务进行负载均衡，这个时候你就可以添加多个条目，并配合负载均衡选项进行相关的负载均衡设置
        {
          "Host": "localhost",
          "Port": 8082
        },
        {
          "Host": "localhost",
          "Port": 8083
        }
      ],
      //以占位符的方式捕获所有路由，占位符{url}任何名称均可
      //"DownstreamPathTemplate": "/{url}",
      //"DownstreamScheme": "http",
      //"DownstreamHostAndPorts": [
      //	{
      //		"Host": "localhost",
      //		"Port": 1001,
      //	}
      //],

      //动态路由，允许指定一个查询字符串作为DownstreamPathTemplate的一部分。使用上游路径模板中{unitId}的值，并将其作为名为unitId的查询字符串参数添加到下游请求中
      //"DownstreamPathTemplate": "/api/subscriptions/{subscriptionId}/updates?unitId={unitId}",
      //"UpstreamPathTemplate": "/api/units/{subscriptionId}/{unitId}/updates",

      //允许将查询字符串参数放在UpstreamPathTemplate中，以便可以将某些查询与某些服务匹配
      //"DownstreamPathTemplate": "/api/units/{subscriptionId}/{unitId}/updates",
      //"UpstreamPathTemplate": "/api/subscriptions/{subscriptionId}/updates?unitId={unitId}",

      "UpstreamPathTemplate": "/posts/{postId}", //上游路由请求的模板。用于标识要用于给定请求的DownstreamPathTemplate对应的URL。使用UpstreamHttpMethod以便Ocelot可以区分具有不同HTTP谓词的请求到相同的URL
      "UpstreamHttpMethod": [ //上游路由请求的方式
        "Get",
        "Post"
      ],
      "AddHeadersToRequest": {},
      "UpstreamHeaderTransform": {},
      "DownstreamHeaderTransform": {}, //请求头转化
      "AddClaimsToRequest": {},
      "RouteClaimsRequirement": {}, //鉴权配置
      "AddQueriesToRequest": {},
      "RequestIdKey": null,
      "FileCacheOptions": {
        "TtlSeconds": 0,
        "Region": null
      },
      "ReRouteIsCaseSensitive": false, //路径+查询字符串统统转发到下游路由，默认的ReRouting的配置是不区分大小写的，开启则意味着Ocelot将尝试将传入的上游URL与上游模板匹配时，区分大小写
      "ServiceName": "product",
      "QoSOptions": { //Qos服务质量与熔断相关配置,熔断的意思是停止将请求转发到下游服务
        "ExceptionsAllowedBeforeBreaking": 3, //允许多少个异常请求
        "DurationOfBreak": 5, //断的时间，单位为秒
        "TimeoutValue": 5000 //如果下游请求的处理时间超过多少则自如将请求设置为超时
      },
      "LoadBalancerOptions": { //负载均衡相关选项
        //LeastConnection : 将请求发往最空闲的那个服务器
        //RoundRobin ：轮流发送
        //NoLoadBalance ：不启用负载均衡，总是发往第一个请求或者服务发现的那个服务器
        "Type": "LeastConnection",
        "Key": null,
        "Expiry": 0
      },
      "UseServiceDiscovery": true,
      "LoadBalancer": "LeastConnection", //负载均衡相关选项
      "RateLimitOptions": { //限流相关配置
        "ClientWhitelist": [], //ClientWihteList 白名单
        "EnableRateLimiting": true, //是否启用限流
        "Period": "1s", //统计时间段：1s, 5m, 1h, 1d
        "PeriodTimespan": 1, //多少秒之后客户端可以重试
        "Limit": 0 //在统计时间段内允许的最大请求数量
      },
      "AuthenticationOptions": { //认证相关选项
        "AuthenticationProviderKey": null,
        "AllowedScopes": []
      },
      "HttpHandlerOptions": { //HttpHandler相关的配置
        "AllowAutoRedirect": false, //是否对下游重定向进行响应。请求是否应遵循重定向响应。如果请求应自动遵循来自下游资源的重定向响应，则将其设置为true; 否则是假的。默认值为false。
        "UseCookieContainer": false, //是否启动CookieContainer储存cookies。处理程序是否使用CookieContainer属性存储服务器cookie并在发送请求时使用这些cookie。默认值为false。请注意，如果您使CookieContainer，则Ocelot会为每个下游服务缓存HttpClient。这意味着对该DownstreamService的所有请求将共享相同的cookie
        "UseTracing": false,
        "UseProxy": true
      },
      "UpstreamHost": null, //上游Host，仅当主机标头值为此值时，才会匹配上面的ReRoute
      "Key": null,
      "DelegatingHandlers": [],
      "Priority": 1, //设置匹配上游HttpRequest的优先级顺序
      "Timeout": 0,
      "DangerousAcceptAnyServerCertificateValidator": false //忽略SSL 警告/错误,最好的方式是创建本地以及远程所信任的证书
    }
  ],
  "GlobalConfiguration": {
  },
  "Aggregates": [ //聚合配置,多个正常的ReRoutes打包并映射到一个对象来对客户端的请求进行响应
    {
      //"ReRouteKeys": [
      //  "Good",
      //  "Order"
      //],
      //"UpstreamPathTemplate": "/GetOrderDetail/{id}"
    }
  ]
}
